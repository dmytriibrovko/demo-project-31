name: demo-stage-31
env:
  APPLICATION_NAME: "demo-31"
  PACKAGE_NAME: "demo-31-ver-${{ github.sha }}.zip"
  EB_APP_NAME: "demo-31"
  EB_ENVIRONMENT_NAME: "Demo31-env"
  AWS_REGION_NAME: "eu-north-1"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  test_server:
    runs-on: ubuntu-latest
    steps:

      - name: Git clone repo
        uses: actions/checkout@v1
      - uses: actions/setup-python@v2
        with:
          python-version: '3.x' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
      - run: pip install -r requirements.txt

      - name: Main test
        run: |
          python "web_server/test.py"

    create_image:
      runs-on: ubuntu-latest
      needs: [test_server]
      steps:

        - name: Git clone
          uses: actions/checkout@v2

        - name: Login to Docker Hub
          uses: docker/login-action@v1
          with:
            username: ${{ secrets.DOCKER_HUB_USERNAME }}
            password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

        - name: Set up Docker Buildx
          id: buildx
          uses: docker/setup-buildx-action@v1

        - name: Build and push
          id: docker_build
          uses: docker/build-push-action@v2
          with:
            context: ./
            file: ./Dockerfile
            push: true
            tags: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-project-31:v${{ github.sha }}

        - name: Image digest
          run: echo ${{ steps.docker_build.outputs.digest }}

    deploy_ecs:
      runs-on: ubuntu-latest
      needs: [create_image]
      steps:

        - name: Configure credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ${{ env.AWS_REGION_NAME }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Download task definition
          run: |
            aws ecs describe-task-definition --task-definition demo-project-31 --query taskDefinition > task-definition.json
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: demo-project-31
            image: ${{ secrets.DOCKER_HUB_USERNAME }}/demo-project-31:v${{ github.sha }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: demo-project-31
            cluster: demo-project-31
            wait-for-service-stability: true